module Keyboard where

import FRP.Helm.Keyboard
import Test.HUnit hiding (Test)
import Test.Framework (Test)
import Test.Framework.Providers.HUnit
import qualified Graphics.UI.SDL as SDL
import qualified Graphics.UI.SDL.Utilities as Util

{- Like the mouse variants, Helm's key variants map to SDL's. If they're not assigned correctly,
   then the wrong keys will be provided. It's unfortunate that we have to assign the enum class this way
   but it seems to be the only safe way without doing a pattern match. It's also useful for edge-cases
   that users of the engine might have if they need to interface with SDL directly without the bindings. -}
tests :: [Test]
tests = [testCase "backspace <=> SDL" (Util.fromEnum SDL.SDLK_BACKSPACE @=? fromIntegral (fromEnum BackspaceKey)),
         testCase "tab <=> SDL" (Util.fromEnum SDL.SDLK_TAB @=? fromIntegral (fromEnum TabKey)),
         testCase "clear <=> SDL" (Util.fromEnum SDL.SDLK_CLEAR @=? fromIntegral (fromEnum ClearKey)),
         testCase "enter <=> SDL" (Util.fromEnum SDL.SDLK_RETURN @=? fromIntegral (fromEnum EnterKey)),
         testCase "pause <=> SDL" (Util.fromEnum SDL.SDLK_PAUSE @=? fromIntegral (fromEnum PauseKey)),
         testCase "escape <=> SDL" (Util.fromEnum SDL.SDLK_ESCAPE @=? fromIntegral (fromEnum EscapeKey)),
         testCase "space <=> SDL" (Util.fromEnum SDL.SDLK_SPACE @=? fromIntegral (fromEnum SpaceKey)),
         testCase "exclaim <=> SDL" (Util.fromEnum SDL.SDLK_EXCLAIM @=? fromIntegral (fromEnum ExclaimKey)),
         testCase "quotedbl <=> SDL" (Util.fromEnum SDL.SDLK_QUOTEDBL @=? fromIntegral (fromEnum QuotedBlKey)),
         testCase "hash <=> SDL" (Util.fromEnum SDL.SDLK_HASH @=? fromIntegral (fromEnum HashKey)),
         testCase "dollar <=> SDL" (Util.fromEnum SDL.SDLK_DOLLAR @=? fromIntegral (fromEnum DollarKey)),
         testCase "ampersand <=> SDL" (Util.fromEnum SDL.SDLK_AMPERSAND @=? fromIntegral (fromEnum AmpersandKey)),
         testCase "quote <=> SDL" (Util.fromEnum SDL.SDLK_QUOTE @=? fromIntegral (fromEnum QuoteKey)),
         testCase "leftparen <=> SDL" (Util.fromEnum SDL.SDLK_LEFTPAREN @=? fromIntegral (fromEnum LeftParenKey)),
         testCase "rightparen <=> SDL" (Util.fromEnum SDL.SDLK_RIGHTPAREN @=? fromIntegral (fromEnum RightParenKey)),
         testCase "asterisk <=> SDL" (Util.fromEnum SDL.SDLK_ASTERISK @=? fromIntegral (fromEnum AsteriskKey)),
         testCase "plus <=> SDL" (Util.fromEnum SDL.SDLK_PLUS @=? fromIntegral (fromEnum PlusKey)),
         testCase "comma <=> SDL" (Util.fromEnum SDL.SDLK_COMMA @=? fromIntegral (fromEnum CommaKey)),
         testCase "minus <=> SDL" (Util.fromEnum SDL.SDLK_MINUS @=? fromIntegral (fromEnum MinusKey)),
         testCase "period <=> SDL" (Util.fromEnum SDL.SDLK_PERIOD @=? fromIntegral (fromEnum PeriodKey)),
         testCase "slash <=> SDL" (Util.fromEnum SDL.SDLK_SLASH @=? fromIntegral (fromEnum SlashKey)),
         testCase "num0 <=> SDL" (Util.fromEnum SDL.SDLK_0 @=? fromIntegral (fromEnum Num0Key)),
         testCase "num1 <=> SDL" (Util.fromEnum SDL.SDLK_1 @=? fromIntegral (fromEnum Num1Key)),
         testCase "num2 <=> SDL" (Util.fromEnum SDL.SDLK_2 @=? fromIntegral (fromEnum Num2Key)),
         testCase "num3 <=> SDL" (Util.fromEnum SDL.SDLK_3 @=? fromIntegral (fromEnum Num3Key)),
         testCase "num4 <=> SDL" (Util.fromEnum SDL.SDLK_4 @=? fromIntegral (fromEnum Num4Key)),
         testCase "num5 <=> SDL" (Util.fromEnum SDL.SDLK_5 @=? fromIntegral (fromEnum Num5Key)),
         testCase "num6 <=> SDL" (Util.fromEnum SDL.SDLK_6 @=? fromIntegral (fromEnum Num6Key)),
         testCase "num7 <=> SDL" (Util.fromEnum SDL.SDLK_7 @=? fromIntegral (fromEnum Num7Key)),
         testCase "num8 <=> SDL" (Util.fromEnum SDL.SDLK_8 @=? fromIntegral (fromEnum Num8Key)),
         testCase "num9 <=> SDL" (Util.fromEnum SDL.SDLK_9 @=? fromIntegral (fromEnum Num9Key)),
         testCase "colon <=> SDL" (Util.fromEnum SDL.SDLK_COLON @=? fromIntegral (fromEnum ColonKey)),
         testCase "semicolon <=> SDL" (Util.fromEnum SDL.SDLK_SEMICOLON @=? fromIntegral (fromEnum SemicolonKey)),
         testCase "less <=> SDL" (Util.fromEnum SDL.SDLK_LESS @=? fromIntegral (fromEnum LessKey)),
         testCase "equals <=> SDL" (Util.fromEnum SDL.SDLK_EQUALS @=? fromIntegral (fromEnum EqualsKey)),
         testCase "greater <=> SDL" (Util.fromEnum SDL.SDLK_GREATER @=? fromIntegral (fromEnum GreaterKey)),
         testCase "question <=> SDL" (Util.fromEnum SDL.SDLK_QUESTION @=? fromIntegral (fromEnum QuestionKey)),
         testCase "at <=> SDL" (Util.fromEnum SDL.SDLK_AT @=? fromIntegral (fromEnum AtKey)),
         testCase "leftbracket <=> SDL" (Util.fromEnum SDL.SDLK_LEFTBRACKET @=? fromIntegral (fromEnum LeftBracketKey)),
         testCase "backslash <=> SDL" (Util.fromEnum SDL.SDLK_BACKSLASH @=? fromIntegral (fromEnum BackslashKey)),
         testCase "rightbracket <=> SDL" (Util.fromEnum SDL.SDLK_RIGHTBRACKET @=? fromIntegral (fromEnum RightBracketKey)),
         testCase "caret <=> SDL" (Util.fromEnum SDL.SDLK_CARET @=? fromIntegral (fromEnum CaretKey)),
         testCase "underscore <=> SDL" (Util.fromEnum SDL.SDLK_UNDERSCORE @=? fromIntegral (fromEnum UnderscoreKey)),
         testCase "backquote <=> SDL" (Util.fromEnum SDL.SDLK_BACKQUOTE @=? fromIntegral (fromEnum BackquoteKey)),
         testCase "a <=> SDL" (Util.fromEnum SDL.SDLK_a @=? fromIntegral (fromEnum AKey)),
         testCase "b <=> SDL" (Util.fromEnum SDL.SDLK_b @=? fromIntegral (fromEnum BKey)),
         testCase "c <=> SDL" (Util.fromEnum SDL.SDLK_c @=? fromIntegral (fromEnum CKey)),
         testCase "d <=> SDL" (Util.fromEnum SDL.SDLK_d @=? fromIntegral (fromEnum DKey)),
         testCase "e <=> SDL" (Util.fromEnum SDL.SDLK_e @=? fromIntegral (fromEnum EKey)),
         testCase "f <=> SDL" (Util.fromEnum SDL.SDLK_f @=? fromIntegral (fromEnum FKey)),
         testCase "g <=> SDL" (Util.fromEnum SDL.SDLK_g @=? fromIntegral (fromEnum GKey)),
         testCase "h <=> SDL" (Util.fromEnum SDL.SDLK_h @=? fromIntegral (fromEnum HKey)),
         testCase "i <=> SDL" (Util.fromEnum SDL.SDLK_i @=? fromIntegral (fromEnum IKey)),
         testCase "j <=> SDL" (Util.fromEnum SDL.SDLK_j @=? fromIntegral (fromEnum JKey)),
         testCase "k <=> SDL" (Util.fromEnum SDL.SDLK_k @=? fromIntegral (fromEnum KKey)),
         testCase "l <=> SDL" (Util.fromEnum SDL.SDLK_l @=? fromIntegral (fromEnum LKey)),
         testCase "m <=> SDL" (Util.fromEnum SDL.SDLK_m @=? fromIntegral (fromEnum MKey)),
         testCase "n <=> SDL" (Util.fromEnum SDL.SDLK_n @=? fromIntegral (fromEnum NKey)),
         testCase "o <=> SDL" (Util.fromEnum SDL.SDLK_o @=? fromIntegral (fromEnum OKey)),
         testCase "p <=> SDL" (Util.fromEnum SDL.SDLK_p @=? fromIntegral (fromEnum PKey)),
         testCase "q <=> SDL" (Util.fromEnum SDL.SDLK_q @=? fromIntegral (fromEnum QKey)),
         testCase "r <=> SDL" (Util.fromEnum SDL.SDLK_r @=? fromIntegral (fromEnum RKey)),
         testCase "s <=> SDL" (Util.fromEnum SDL.SDLK_s @=? fromIntegral (fromEnum SKey)),
         testCase "t <=> SDL" (Util.fromEnum SDL.SDLK_t @=? fromIntegral (fromEnum TKey)),
         testCase "u <=> SDL" (Util.fromEnum SDL.SDLK_u @=? fromIntegral (fromEnum UKey)),
         testCase "v <=> SDL" (Util.fromEnum SDL.SDLK_v @=? fromIntegral (fromEnum VKey)),
         testCase "w <=> SDL" (Util.fromEnum SDL.SDLK_w @=? fromIntegral (fromEnum WKey)),
         testCase "x <=> SDL" (Util.fromEnum SDL.SDLK_x @=? fromIntegral (fromEnum XKey)),
         testCase "y <=> SDL" (Util.fromEnum SDL.SDLK_y @=? fromIntegral (fromEnum YKey)),
         testCase "z <=> SDL" (Util.fromEnum SDL.SDLK_z @=? fromIntegral (fromEnum ZKey)),
         testCase "delete <=> SDL" (Util.fromEnum SDL.SDLK_DELETE @=? fromIntegral (fromEnum DeleteKey)),
         testCase "keypadnum0 <=> SDL" (Util.fromEnum SDL.SDLK_KP0 @=? fromIntegral (fromEnum KeypadNum0Key)),
         testCase "keypadnum1 <=> SDL" (Util.fromEnum SDL.SDLK_KP1 @=? fromIntegral (fromEnum KeypadNum1Key)),
         testCase "keypadnum2 <=> SDL" (Util.fromEnum SDL.SDLK_KP2 @=? fromIntegral (fromEnum KeypadNum2Key)),
         testCase "keypadnum3 <=> SDL" (Util.fromEnum SDL.SDLK_KP3 @=? fromIntegral (fromEnum KeypadNum3Key)),
         testCase "keypadnum4 <=> SDL" (Util.fromEnum SDL.SDLK_KP4 @=? fromIntegral (fromEnum KeypadNum4Key)),
         testCase "keypadnum5 <=> SDL" (Util.fromEnum SDL.SDLK_KP5 @=? fromIntegral (fromEnum KeypadNum5Key)),
         testCase "keypadnum6 <=> SDL" (Util.fromEnum SDL.SDLK_KP6 @=? fromIntegral (fromEnum KeypadNum6Key)),
         testCase "keypadnum7 <=> SDL" (Util.fromEnum SDL.SDLK_KP7 @=? fromIntegral (fromEnum KeypadNum7Key)),
         testCase "keypadnum8 <=> SDL" (Util.fromEnum SDL.SDLK_KP8 @=? fromIntegral (fromEnum KeypadNum8Key)),
         testCase "keypadnum9 <=> SDL" (Util.fromEnum SDL.SDLK_KP9 @=? fromIntegral (fromEnum KeypadNum9Key)),
         testCase "keypadperiod <=> SDL" (Util.fromEnum SDL.SDLK_KP_PERIOD @=? fromIntegral (fromEnum KeypadPeriodKey)),
         testCase "keypaddivide <=> SDL" (Util.fromEnum SDL.SDLK_KP_DIVIDE @=? fromIntegral (fromEnum KeypadDivideKey)),
         testCase "keypadmultiply <=> SDL" (Util.fromEnum SDL.SDLK_KP_MULTIPLY @=? fromIntegral (fromEnum KeypadMultiplyKey)),
         testCase "keypadminus <=> SDL" (Util.fromEnum SDL.SDLK_KP_MINUS @=? fromIntegral (fromEnum KeypadMinusKey)),
         testCase "keypadplus <=> SDL" (Util.fromEnum SDL.SDLK_KP_PLUS @=? fromIntegral (fromEnum KeypadPlusKey)),
         testCase "keypadenter <=> SDL" (Util.fromEnum SDL.SDLK_KP_ENTER @=? fromIntegral (fromEnum KeypadEnterKey)),
         testCase "keypadequals <=> SDL" (Util.fromEnum SDL.SDLK_KP_EQUALS @=? fromIntegral (fromEnum KeypadEqualsKey)),
         testCase "up <=> SDL" (Util.fromEnum SDL.SDLK_UP @=? fromIntegral (fromEnum UpKey)),
         testCase "down <=> SDL" (Util.fromEnum SDL.SDLK_DOWN @=? fromIntegral (fromEnum DownKey)),
         testCase "right <=> SDL" (Util.fromEnum SDL.SDLK_RIGHT @=? fromIntegral (fromEnum RightKey)),
         testCase "left <=> SDL" (Util.fromEnum SDL.SDLK_LEFT @=? fromIntegral (fromEnum LeftKey)),
         testCase "insert <=> SDL" (Util.fromEnum SDL.SDLK_INSERT @=? fromIntegral (fromEnum InsertKey)),
         testCase "home <=> SDL" (Util.fromEnum SDL.SDLK_HOME @=? fromIntegral (fromEnum HomeKey)),
         testCase "end <=> SDL" (Util.fromEnum SDL.SDLK_END @=? fromIntegral (fromEnum EndKey)),
         testCase "pageup <=> SDL" (Util.fromEnum SDL.SDLK_PAGEUP @=? fromIntegral (fromEnum PageUpKey)),
         testCase "pagedown <=> SDL" (Util.fromEnum SDL.SDLK_PAGEDOWN @=? fromIntegral (fromEnum PageDownKey)),
         testCase "f1 <=> SDL" (Util.fromEnum SDL.SDLK_F1 @=? fromIntegral (fromEnum F1Key)),
         testCase "f2 <=> SDL" (Util.fromEnum SDL.SDLK_F2 @=? fromIntegral (fromEnum F2Key)),
         testCase "f3 <=> SDL" (Util.fromEnum SDL.SDLK_F3 @=? fromIntegral (fromEnum F3Key)),
         testCase "f4 <=> SDL" (Util.fromEnum SDL.SDLK_F4 @=? fromIntegral (fromEnum F4Key)),
         testCase "f5 <=> SDL" (Util.fromEnum SDL.SDLK_F5 @=? fromIntegral (fromEnum F5Key)),
         testCase "f6 <=> SDL" (Util.fromEnum SDL.SDLK_F6 @=? fromIntegral (fromEnum F6Key)),
         testCase "f7 <=> SDL" (Util.fromEnum SDL.SDLK_F7 @=? fromIntegral (fromEnum F7Key)),
         testCase "f8 <=> SDL" (Util.fromEnum SDL.SDLK_F8 @=? fromIntegral (fromEnum F8Key)),
         testCase "f9 <=> SDL" (Util.fromEnum SDL.SDLK_F9 @=? fromIntegral (fromEnum F9Key)),
         testCase "f10 <=> SDL" (Util.fromEnum SDL.SDLK_F10 @=? fromIntegral (fromEnum F10Key)),
         testCase "f11 <=> SDL" (Util.fromEnum SDL.SDLK_F11 @=? fromIntegral (fromEnum F11Key)),
         testCase "f12 <=> SDL" (Util.fromEnum SDL.SDLK_F12 @=? fromIntegral (fromEnum F12Key)),
         testCase "f13 <=> SDL" (Util.fromEnum SDL.SDLK_F13 @=? fromIntegral (fromEnum F13Key)),
         testCase "f14 <=> SDL" (Util.fromEnum SDL.SDLK_F14 @=? fromIntegral (fromEnum F14Key)),
         testCase "f15 <=> SDL" (Util.fromEnum SDL.SDLK_F15 @=? fromIntegral (fromEnum F15Key)),
         testCase "numlock <=> SDL" (Util.fromEnum SDL.SDLK_NUMLOCK @=? fromIntegral (fromEnum NumLockKey)),
         testCase "capslock <=> SDL" (Util.fromEnum SDL.SDLK_CAPSLOCK @=? fromIntegral (fromEnum CapsLockKey)),
         testCase "scrolllock <=> SDL" (Util.fromEnum SDL.SDLK_SCROLLOCK @=? fromIntegral (fromEnum ScrollLockKey)),
         testCase "rshift <=> SDL" (Util.fromEnum SDL.SDLK_RSHIFT @=? fromIntegral (fromEnum RShiftKey)),
         testCase "lshift <=> SDL" (Util.fromEnum SDL.SDLK_LSHIFT @=? fromIntegral (fromEnum LShiftKey)),
         testCase "rctrl <=> SDL" (Util.fromEnum SDL.SDLK_RCTRL @=? fromIntegral (fromEnum RCtrlKey)),
         testCase "lctrl <=> SDL" (Util.fromEnum SDL.SDLK_LCTRL @=? fromIntegral (fromEnum LCtrlKey)),
         testCase "ralt <=> SDL" (Util.fromEnum SDL.SDLK_RALT @=? fromIntegral (fromEnum RAltKey)),
         testCase "lalt <=> SDL" (Util.fromEnum SDL.SDLK_LALT @=? fromIntegral (fromEnum LAltKey)),
         testCase "rmeta <=> SDL" (Util.fromEnum SDL.SDLK_RMETA @=? fromIntegral (fromEnum RMetaKey)),
         testCase "lmeta <=> SDL" (Util.fromEnum SDL.SDLK_LMETA @=? fromIntegral (fromEnum LMetaKey)),
         testCase "rsuper <=> SDL" (Util.fromEnum SDL.SDLK_RSUPER @=? fromIntegral (fromEnum RSuperKey)),
         testCase "lsuper <=> SDL" (Util.fromEnum SDL.SDLK_LSUPER @=? fromIntegral (fromEnum LSuperKey)),
         testCase "mode <=> SDL" (Util.fromEnum SDL.SDLK_MODE @=? fromIntegral (fromEnum ModeKey)),
         testCase "compose <=> SDL" (Util.fromEnum SDL.SDLK_COMPOSE @=? fromIntegral (fromEnum ComposeKey)),
         testCase "help <=> SDL" (Util.fromEnum SDL.SDLK_HELP @=? fromIntegral (fromEnum HelpKey)),
         testCase "print <=> SDL" (Util.fromEnum SDL.SDLK_PRINT @=? fromIntegral (fromEnum PrintKey)),
         testCase "sysreq <=> SDL" (Util.fromEnum SDL.SDLK_SYSREQ @=? fromIntegral (fromEnum SysReqKey)),
         testCase "break <=> SDL" (Util.fromEnum SDL.SDLK_BREAK @=? fromIntegral (fromEnum BreakKey)),
         testCase "menu <=> SDL" (Util.fromEnum SDL.SDLK_MENU @=? fromIntegral (fromEnum MenuKey)),
         testCase "power <=> SDL" (Util.fromEnum SDL.SDLK_POWER @=? fromIntegral (fromEnum PowerKey)),
         testCase "euro <=> SDL" (Util.fromEnum SDL.SDLK_EURO @=? fromIntegral (fromEnum EuroKey)),
         testCase "undo <=> SDL" (Util.fromEnum SDL.SDLK_UNDO @=? fromIntegral (fromEnum UndoKey))]
